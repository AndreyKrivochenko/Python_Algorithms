"""
    Написать программу сложения и умножения двух положительных целых шестнадцатеричных чисел. При этом каждое число
    представляется как коллекция, элементы которой — цифры числа. Например, пользователь ввёл A2 и C4F. Нужно сохранить
    их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно. Сумма чисел из примера: [‘C’, ‘F’, ‘1’],
    произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

    Сделал только сложение, умножение не успеваю... Буду думать как уменьшить программу, уж больно монструозно вышло
"""
from collections import deque

SUMM_MATR = [
    ['0', '1', '2',	'3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'],
    ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10'],
    ['2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11'],
    ['3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12'],
    ['4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13'],
    ['5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14'],
    ['6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15'],
    ['7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16'],
    ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17'],
    ['9', 'A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18'],
    ['A', 'B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],
    ['B', 'C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A'],
    ['C', 'D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B'],
    ['D', 'E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C'],
    ['E', 'F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D'],
    ['F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E']
]

MULT_MATR = [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'],
    ['0', '2', '4', '6', '8', 'A', 'C', 'E', '10', '12', '14', '16', '18', '1A', '1C', '1E'],
    ['0', '3', '6', '9', 'C', 'F', '12', '15', '18', '1B', '1E', '21', '24', '27', '2A', '2D'],
    ['0', '4', '8', 'C', '10', '14', '18', '1C', '20', '24', '28', '2C', '30', '34', '38', '3C'],
    ['0', '5', 'A', 'F', '14', '19', '1E', '23', '28', '2D', '32', '37', '3C', '41', '46', '4B'],
    ['0', '6', 'C', '12', '18', '1E', '24', '2A', '30', '36', '3C', '42', '48', '4E', '54', '5A'],
    ['0', '7', 'E', '15', '1C', '23', '2A', '31', '38', '3F', '46', '4D', '54', '5B', '62', '69'],
    ['0', '8', '10', '18', '20', '28', '30', '38', '40', '48', '50', '58', '60', '68', '70', '78'],
    ['0', '9', '12', '1B', '24', '2D', '36', '3F', '48', '51', '5A', '63', '6C', '75', '7E', '87'],
    ['0', 'A', '14', '1E', '28', '32', '3C', '46', '50', '5A', '64', '6E', '78', '82', '8C', '96'],
    ['0', 'B', '16', '21', '2C', '37', '42', '4D', '58', '63', '6E', '79', '84', '8F', '9A', 'A5'],
    ['0', 'C', '18', '24', '30', '3C', '48', '54', '60', '6C', '78', '84', '90', '9C', 'A8', 'B4'],
    ['0', 'D', '1A', '27', '34', '41', '4E', '5B', '68', '75', '82', '8F', '9C', 'A9', 'B6', 'C3'],
    ['0', 'E', '1C', '2A', '38', '46', '54', '62', '70', '7E', '8C', '9A', 'A8', 'B6', 'C4', 'D2'],
    ['0', 'F', '1E', '2D', '3C', '4B', '5A', '69', '78', '87', '96', 'A5', 'B4', 'C3', 'D2', 'E1']
]

HEX_DICT = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
            'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}


def summation_one(a: str, b: str):
    return SUMM_MATR[HEX_DICT[b]][HEX_DICT[a]]


def multiply_one(a: str, b: str):
    return MULT_MATR[HEX_DICT[b]][HEX_DICT[a]]


def summation(a: str, b: str):
    a = a.upper()
    b = b.upper()
    summa = deque()
    first = list(i for i in a)
    second = list(i for i in b)
    if len(first) < len(second):
        first, second = second, first
    one = False
    for _ in range(len(first)):
        if len(second) > 0:
            spam = list(i for i in summation_one(first.pop(), second.pop()))
            if one:
                if len(spam) > 1:
                    summa.appendleft(summation_one(spam[1], '1'))
                    one = True
                else:
                    summa.appendleft(summation_one(spam[0], '1'))
                    one = False
            else:
                if len(spam) > 1:
                    summa.appendleft(spam[1])
                    one = True
                else:
                    summa.appendleft(spam[0])
        else:
            if one:
                spam = list(i for i in summation_one(first.pop(), '1'))
                if len(spam) > 1:
                    summa.appendleft(spam[1])
                    one = True
                else:
                    summa.appendleft(spam[0])
                    one = False
            else:
                summa.extendleft(first[::-1])
                break
        if len(first) == 0 and one:
            summa.appendleft('1')

    return ''.join(i for i in summa)


def multiply(a: str, b: str):
    a = a.upper()
    b = b.upper()
    mult = deque()
    first = list(i for i in a)
    second = list(i for i in b)
    if len(first) < len(second):
        first, second = second, first
    summands = deque()
    for mult_s in second[::-1]:
        summand = []
        for mult_f in first[::-1]:
            summand.append(multiply_one(mult_f, mult_s))
        tmp = 0
        for i in range(len(summand)):
            if i + 1 in range(len(summand)):
                pass







print(summation('1964', '3e80'))
